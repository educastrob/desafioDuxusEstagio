<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/main/java/br/com/duxusdesafio/controller/AnaliseController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/br/com/duxusdesafio/controller/AnaliseController.java" />
              <option name="originalContent" value="package br.com.duxusdesafio.controller;&#10;&#10;import br.com.duxusdesafio.model.Integrante;&#10;import br.com.duxusdesafio.model.Time;&#10;import br.com.duxusdesafio.service.ApiService;&#10;import br.com.duxusdesafio.service.TimeService;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.format.annotation.DateTimeFormat;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;import java.time.LocalDate;&#10;import java.util.List;&#10;import java.util.Map;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/api&quot;)&#10;@CrossOrigin(origins = &quot;*&quot;)&#10;public class AnaliseController {&#10;    &#10;    @GetMapping(&quot;/test&quot;)&#10;    public ResponseEntity&lt;String&gt; test() {&#10;        return ResponseEntity.ok(&quot;API funcionando!&quot;);&#10;    }&#10;    &#10;    @Autowired&#10;    private ApiService apiService;&#10;    &#10;    @Autowired&#10;    private TimeService timeService;&#10;    &#10;    @GetMapping(&quot;/TimeDaData&quot;)&#10;    public ResponseEntity&lt;Map&lt;String, Object&gt;&gt; timeDaData(&#10;            @RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate data) {&#10;        &#10;        System.out.println(&quot;Endpoint /TimeDaData chamado com data: &quot; + data);&#10;        &#10;        List&lt;Time&gt; todosOsTimes = timeService.listarTodos();&#10;        System.out.println(&quot;Total de times encontrados: &quot; + todosOsTimes.size());&#10;        &#10;        Time time = apiService.timeDaData(data, todosOsTimes);&#10;        &#10;        if (time == null) {&#10;            System.out.println(&quot;Nenhum time encontrado para a data: &quot; + data);&#10;            return ResponseEntity.notFound().build();&#10;        }&#10;        &#10;        List&lt;String&gt; integrantes = time.getComposicaoTime().stream()&#10;                .map(comp -&gt; comp.getIntegrante().getNome())&#10;                .collect(java.util.stream.Collectors.toList());&#10;        &#10;        Map&lt;String, Object&gt; response = Map.of(&#10;                &quot;data&quot;, time.getData(),&#10;                &quot;integrantes&quot;, integrantes&#10;        );&#10;        &#10;        System.out.println(&quot;Time encontrado: &quot; + response);&#10;        return ResponseEntity.ok(response);&#10;    }&#10;    &#10;    @GetMapping(&quot;/IntegranteMaisUsado&quot;)&#10;    public ResponseEntity&lt;Map&lt;String, Object&gt;&gt; integranteMaisUsado(&#10;            @RequestParam(required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate dataInicial,&#10;            @RequestParam(required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate dataFinal) {&#10;        &#10;        List&lt;Time&gt; todosOsTimes = timeService.listarTodos();&#10;        Integrante integrante = apiService.integranteMaisUsado(dataInicial, dataFinal, todosOsTimes);&#10;        &#10;        if (integrante == null) {&#10;            return ResponseEntity.notFound().build();&#10;        }&#10;        &#10;        Map&lt;String, Object&gt; response = Map.of(&#10;                &quot;id&quot;, integrante.getId(),&#10;                &quot;nome&quot;, integrante.getNome(),&#10;                &quot;franquia&quot;, integrante.getFranquia(),&#10;                &quot;funcao&quot;, integrante.getFuncao()&#10;        );&#10;        &#10;        return ResponseEntity.ok(response);&#10;    }&#10;    &#10;    @GetMapping(&quot;/TimeMaisComum&quot;)&#10;    public ResponseEntity&lt;Map&lt;String, Object&gt;&gt; timeMaisComum(&#10;            @RequestParam(required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate dataInicial,&#10;            @RequestParam(required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate dataFinal) {&#10;        &#10;        List&lt;Time&gt; todosOsTimes = timeService.listarTodos();&#10;        List&lt;String&gt; integrantes = apiService.integrantesDoTimeMaisComum(dataInicial, dataFinal, todosOsTimes);&#10;        &#10;        Map&lt;String, Object&gt; response = Map.of(&quot;integrantes&quot;, integrantes);&#10;        return ResponseEntity.ok(response);&#10;    }&#10;    &#10;    @GetMapping(&quot;/FuncaoMaisComum&quot;)&#10;    public ResponseEntity&lt;Map&lt;String, String&gt;&gt; funcaoMaisComum(&#10;            @RequestParam(required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate dataInicial,&#10;            @RequestParam(required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate dataFinal) {&#10;        &#10;        List&lt;Time&gt; todosOsTimes = timeService.listarTodos();&#10;        String funcao = apiService.funcaoMaisComum(dataInicial, dataFinal, todosOsTimes);&#10;        &#10;        if (funcao == null) {&#10;            return ResponseEntity.notFound().build();&#10;        }&#10;        &#10;        Map&lt;String, String&gt; response = Map.of(&quot;Função&quot;, funcao);&#10;        return ResponseEntity.ok(response);&#10;    }&#10;    &#10;    @GetMapping(&quot;/FranquiaMaisFamosa&quot;)&#10;    public ResponseEntity&lt;Map&lt;String, String&gt;&gt; franquiaMaisFamosa(&#10;            @RequestParam(required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate dataInicial,&#10;            @RequestParam(required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate dataFinal) {&#10;        &#10;        List&lt;Time&gt; todosOsTimes = timeService.listarTodos();&#10;        String franquia = apiService.franquiaMaisFamosa(dataInicial, dataFinal, todosOsTimes);&#10;        &#10;        if (franquia == null) {&#10;            return ResponseEntity.notFound().build();&#10;        }&#10;        &#10;        Map&lt;String, String&gt; response = Map.of(&quot;franquia&quot;, franquia);&#10;        return ResponseEntity.ok(response);&#10;    }&#10;    &#10;    @GetMapping(&quot;/ContagemPorFranquia&quot;)&#10;    public ResponseEntity&lt;Map&lt;String, Long&gt;&gt; contagemPorFranquia(&#10;            @RequestParam(required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate dataInicial,&#10;            @RequestParam(required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate dataFinal) {&#10;        &#10;        List&lt;Time&gt; todosOsTimes = timeService.listarTodos();&#10;        Map&lt;String, Long&gt; contagem = apiService.contagemPorFranquia(dataInicial, dataFinal, todosOsTimes);&#10;        &#10;        return ResponseEntity.ok(contagem);&#10;    }&#10;    &#10;    @GetMapping(&quot;/ContagemPorFuncao&quot;)&#10;    public ResponseEntity&lt;Map&lt;String, Long&gt;&gt; contagemPorFuncao(&#10;            @RequestParam(required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate dataInicial,&#10;            @RequestParam(required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate dataFinal) {&#10;        &#10;        List&lt;Time&gt; todosOsTimes = timeService.listarTodos();&#10;        Map&lt;String, Long&gt; contagem = apiService.contagemPorFuncao(dataInicial, dataFinal, todosOsTimes);&#10;        &#10;        return ResponseEntity.ok(contagem);&#10;    }&#10;} " />
              <option name="updatedContent" value="package br.com.duxusdesafio.controller;&#10;&#10;import br.com.duxusdesafio.model.Integrante;&#10;import br.com.duxusdesafio.model.Time;&#10;import br.com.duxusdesafio.service.ApiService;&#10;import br.com.duxusdesafio.service.TimeService;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.format.annotation.DateTimeFormat;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;import java.time.LocalDate;&#10;import java.util.List;&#10;import java.util.Map;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/api&quot;)&#10;@CrossOrigin(origins = &quot;*&quot;)&#10;public class AnaliseController {&#10;    &#10;    @GetMapping(&quot;/test&quot;)&#10;    public ResponseEntity&lt;String&gt; test() {&#10;        return ResponseEntity.ok(&quot;API funcionando!&quot;);&#10;    }&#10;    &#10;    @Autowired&#10;    private ApiService apiService;&#10;    &#10;    @Autowired&#10;    private TimeService timeService;&#10;    &#10;    @GetMapping(&quot;/time_da_data&quot;)&#10;    public ResponseEntity&lt;Map&lt;String, Object&gt;&gt; timeDaData(&#10;            @RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate data) {&#10;        &#10;        System.out.println(&quot;Endpoint /TimeDaData chamado com data: &quot; + data);&#10;        &#10;        List&lt;Time&gt; todosOsTimes = timeService.listarTodos();&#10;        System.out.println(&quot;Total de times encontrados: &quot; + todosOsTimes.size());&#10;        &#10;        Time time = apiService.timeDaData(data, todosOsTimes);&#10;        &#10;        if (time == null) {&#10;            System.out.println(&quot;Nenhum time encontrado para a data: &quot; + data);&#10;            return ResponseEntity.notFound().build();&#10;        }&#10;        &#10;        List&lt;String&gt; integrantes = time.getComposicaoTime().stream()&#10;                .map(comp -&gt; comp.getIntegrante().getNome())&#10;                .collect(java.util.stream.Collectors.toList());&#10;        &#10;        Map&lt;String, Object&gt; response = Map.of(&#10;                &quot;data&quot;, time.getData(),&#10;                &quot;integrantes&quot;, integrantes&#10;        );&#10;        &#10;        System.out.println(&quot;Time encontrado: &quot; + response);&#10;        return ResponseEntity.ok(response);&#10;    }&#10;    &#10;    @GetMapping(&quot;/integrante_mais_usado&quot;)&#10;    public ResponseEntity&lt;Map&lt;String, Object&gt;&gt; integranteMaisUsado(&#10;            @RequestParam(required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate dataInicial,&#10;            @RequestParam(required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate dataFinal) {&#10;        &#10;        List&lt;Time&gt; todosOsTimes = timeService.listarTodos();&#10;        Integrante integrante = apiService.integranteMaisUsado(dataInicial, dataFinal, todosOsTimes);&#10;        &#10;        if (integrante == null) {&#10;            return ResponseEntity.notFound().build();&#10;        }&#10;        &#10;        Map&lt;String, Object&gt; response = Map.of(&#10;                &quot;id&quot;, integrante.getId(),&#10;                &quot;nome&quot;, integrante.getNome(),&#10;                &quot;franquia&quot;, integrante.getFranquia(),&#10;                &quot;funcao&quot;, integrante.getFuncao()&#10;        );&#10;        &#10;        return ResponseEntity.ok(response);&#10;    }&#10;    &#10;    @GetMapping(&quot;/time_mais_comum&quot;)&#10;    public ResponseEntity&lt;Map&lt;String, Object&gt;&gt; timeMaisComum(&#10;            @RequestParam(required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate dataInicial,&#10;            @RequestParam(required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate dataFinal) {&#10;        &#10;        List&lt;Time&gt; todosOsTimes = timeService.listarTodos();&#10;        List&lt;String&gt; integrantes = apiService.integrantesDoTimeMaisComum(dataInicial, dataFinal, todosOsTimes);&#10;        &#10;        Map&lt;String, Object&gt; response = Map.of(&quot;integrantes&quot;, integrantes);&#10;        return ResponseEntity.ok(response);&#10;    }&#10;    &#10;    @GetMapping(&quot;/funcao_mais_comum&quot;)&#10;    public ResponseEntity&lt;Map&lt;String, String&gt;&gt; funcaoMaisComum(&#10;            @RequestParam(required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate dataInicial,&#10;            @RequestParam(required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate dataFinal) {&#10;        &#10;        List&lt;Time&gt; todosOsTimes = timeService.listarTodos();&#10;        String funcao = apiService.funcaoMaisComum(dataInicial, dataFinal, todosOsTimes);&#10;        &#10;        if (funcao == null) {&#10;            return ResponseEntity.notFound().build();&#10;        }&#10;        &#10;        Map&lt;String, String&gt; response = Map.of(&quot;Função&quot;, funcao);&#10;        return ResponseEntity.ok(response);&#10;    }&#10;    &#10;    @GetMapping(&quot;/franquia_mais_famosa&quot;)&#10;    public ResponseEntity&lt;Map&lt;String, String&gt;&gt; franquiaMaisFamosa(&#10;            @RequestParam(required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate dataInicial,&#10;            @RequestParam(required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate dataFinal) {&#10;        &#10;        List&lt;Time&gt; todosOsTimes = timeService.listarTodos();&#10;        String franquia = apiService.franquiaMaisFamosa(dataInicial, dataFinal, todosOsTimes);&#10;        &#10;        if (franquia == null) {&#10;            return ResponseEntity.notFound().build();&#10;        }&#10;        &#10;        Map&lt;String, String&gt; response = Map.of(&quot;franquia&quot;, franquia);&#10;        return ResponseEntity.ok(response);&#10;    }&#10;    &#10;    @GetMapping(&quot;/contagem_por_franquia&quot;)&#10;    public ResponseEntity&lt;Map&lt;String, Long&gt;&gt; contagemPorFranquia(&#10;            @RequestParam(required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate dataInicial,&#10;            @RequestParam(required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate dataFinal) {&#10;        &#10;        List&lt;Time&gt; todosOsTimes = timeService.listarTodos();&#10;        Map&lt;String, Long&gt; contagem = apiService.contagemPorFranquia(dataInicial, dataFinal, todosOsTimes);&#10;        &#10;        return ResponseEntity.ok(contagem);&#10;    }&#10;    &#10;    @GetMapping(&quot;/contagem_por_funcao&quot;)&#10;    public ResponseEntity&lt;Map&lt;String, Long&gt;&gt; contagemPorFuncao(&#10;            @RequestParam(required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate dataInicial,&#10;            @RequestParam(required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate dataFinal) {&#10;        &#10;        List&lt;Time&gt; todosOsTimes = timeService.listarTodos();&#10;        Map&lt;String, Long&gt; contagem = apiService.contagemPorFuncao(dataInicial, dataFinal, todosOsTimes);&#10;        &#10;        return ResponseEntity.ok(contagem);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/br/com/duxusdesafio/controller/IntegranteController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/br/com/duxusdesafio/controller/IntegranteController.java" />
              <option name="originalContent" value="package br.com.duxusdesafio.controller;&#10;&#10;import br.com.duxusdesafio.controller.dto.IntegranteDTO;&#10;import br.com.duxusdesafio.mapper.IntegranteMapper;&#10;import br.com.duxusdesafio.model.Integrante;&#10;import br.com.duxusdesafio.service.IntegranteService;&#10;import lombok.RequiredArgsConstructor;&#10;import org.springframework.http.HttpStatus;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;import jakarta.validation.Valid;&#10;import java.util.List;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/api/integrantes&quot;)&#10;@CrossOrigin(origins = &quot;*&quot;)&#10;@RequiredArgsConstructor&#10;public class IntegranteController {&#10;    &#10;    private final IntegranteService integranteService;&#10;    private final IntegranteMapper integranteMapper;&#10;    &#10;    @GetMapping&#10;    public ResponseEntity&lt;List&lt;IntegranteDTO&gt;&gt; listarTodos() {&#10;        List&lt;Integrante&gt; integrantes = integranteService.listarTodos();&#10;        List&lt;IntegranteDTO&gt; integrantesDTO = integranteMapper.toDtoList(integrantes);&#10;        &#10;        return ResponseEntity.ok(integrantesDTO);&#10;    }&#10;    &#10;    @GetMapping(&quot;/{id}&quot;)&#10;    public ResponseEntity&lt;IntegranteDTO&gt; buscarPorId(@PathVariable Long id) {&#10;        Integrante integrante = integranteService.buscarPorId(id);&#10;        return ResponseEntity.ok(integranteMapper.toDto(integrante));&#10;    }&#10;    &#10;    @PostMapping&#10;    public ResponseEntity&lt;IntegranteDTO&gt; criar(@Valid @RequestBody IntegranteDTO integranteDTO) {&#10;        Integrante integrante = integranteMapper.toEntity(integranteDTO);&#10;        Integrante integranteSalvo = integranteService.salvar(integrante);&#10;        &#10;        return ResponseEntity.status(HttpStatus.CREATED)&#10;                .body(integranteMapper.toDto(integranteSalvo));&#10;    }&#10;    &#10;    @PutMapping(&quot;/{id}&quot;)&#10;    public ResponseEntity&lt;IntegranteDTO&gt; atualizar(@PathVariable Long id, &#10;                                                  @Valid @RequestBody IntegranteDTO integranteDTO) {&#10;        integranteService.buscarPorId(id);&#10;        &#10;        integranteDTO.setId(id);&#10;        Integrante integrante = integranteMapper.toEntity(integranteDTO);&#10;        Integrante integranteSalvo = integranteService.salvar(integrante);&#10;        &#10;        return ResponseEntity.ok(integranteMapper.toDto(integranteSalvo));&#10;    }&#10;    &#10;    @DeleteMapping(&quot;/{id}&quot;)&#10;    public ResponseEntity&lt;Void&gt; deletar(@PathVariable Long id) {&#10;        integranteService.deletar(id);&#10;        return ResponseEntity.noContent().build();&#10;    }&#10;} " />
              <option name="updatedContent" value="package br.com.duxusdesafio.controller;&#10;&#10;import br.com.duxusdesafio.controller.dto.IntegranteDTO;&#10;import br.com.duxusdesafio.mapper.IntegranteMapper;&#10;import br.com.duxusdesafio.model.Integrante;&#10;import br.com.duxusdesafio.service.IntegranteService;&#10;import lombok.RequiredArgsConstructor;&#10;import org.springframework.http.HttpStatus;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;import jakarta.validation.Valid;&#10;import java.util.List;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/api/integrantes&quot;)&#10;@CrossOrigin(origins = &quot;*&quot;)&#10;@RequiredArgsConstructor&#10;public class IntegranteController {&#10;    &#10;    private final IntegranteService integranteService;&#10;    private final IntegranteMapper integranteMapper;&#10;    &#10;    @GetMapping&#10;    public ResponseEntity&lt;List&lt;IntegranteDTO&gt;&gt; listarTodos() {&#10;        List&lt;Integrante&gt; integrantes = integranteService.listarTodos();&#10;        List&lt;IntegranteDTO&gt; integrantesDTO = integranteMapper.toDtoList(integrantes);&#10;        &#10;        return ResponseEntity.ok(integrantesDTO);&#10;    }&#10;    &#10;    @GetMapping(&quot;/{id}&quot;)&#10;    public ResponseEntity&lt;IntegranteDTO&gt; buscarPorId(@PathVariable Long id) {&#10;        Integrante integrante = integranteService.buscarPorId(id);&#10;        return ResponseEntity.ok(integranteMapper.toDto(integrante));&#10;    }&#10;    &#10;    @PostMapping&#10;    public ResponseEntity&lt;IntegranteDTO&gt; criar(@Valid @RequestBody IntegranteDTO integranteDTO) {&#10;        Integrante integrante = integranteMapper.toEntity(integranteDTO);&#10;        Integrante integranteSalvo = integranteService.salvar(integrante);&#10;        &#10;        return ResponseEntity.status(HttpStatus.CREATED)&#10;                .body(integranteMapper.toDto(integranteSalvo));&#10;    }&#10;    &#10;    @PutMapping(&quot;/{id}&quot;)&#10;    public ResponseEntity&lt;IntegranteDTO&gt; atualizar(@PathVariable Long id, &#10;                                                  @Valid @RequestBody IntegranteDTO integranteDTO) {&#10;        integranteService.buscarPorId(id);&#10;        &#10;        integranteDTO.setId(id);&#10;        Integrante integrante = integranteMapper.toEntity(integranteDTO);&#10;        Integrante integranteSalvo = integranteService.salvar(integrante);&#10;        &#10;        return ResponseEntity.ok(integranteMapper.toDto(integranteSalvo));&#10;    }&#10;    &#10;    @DeleteMapping(&quot;/{id}&quot;)&#10;    public ResponseEntity&lt;Void&gt; deletar(@PathVariable Long id) {&#10;        integranteService.deletar(id);&#10;        return ResponseEntity.noContent().build();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/br/com/duxusdesafio/controller/WebController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/br/com/duxusdesafio/controller/WebController.java" />
              <option name="originalContent" value="package br.com.duxusdesafio.controller;&#10;&#10;import br.com.duxusdesafio.model.Integrante;&#10;import br.com.duxusdesafio.model.Time;&#10;import br.com.duxusdesafio.service.IntegranteService;&#10;import br.com.duxusdesafio.service.TimeService;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.stereotype.Controller;&#10;import org.springframework.web.bind.annotation.GetMapping;&#10;import org.springframework.web.bind.annotation.PostMapping;&#10;import org.springframework.web.bind.annotation.ResponseBody;&#10;&#10;import java.time.LocalDate;&#10;import java.util.Arrays;&#10;&#10;@Controller&#10;public class WebController {&#10;    &#10;    @Autowired&#10;    private IntegranteService integranteService;&#10;    &#10;    @Autowired&#10;    private TimeService timeService;&#10;    &#10;    @GetMapping(&quot;/&quot;)&#10;    public String index() {&#10;        return &quot;index&quot;;&#10;    }&#10;    &#10;    @GetMapping(&quot;/integrante&quot;)&#10;    public String integrante() {&#10;        return &quot;integrante&quot;;&#10;    }&#10;    &#10;    @GetMapping(&quot;/time&quot;)&#10;    public String time() {&#10;        return &quot;time&quot;;&#10;    }&#10;&#10;    @GetMapping(&quot;/analises&quot;)&#10;    public String analises() {&#10;        return &quot;analises&quot;;&#10;    }&#10;    &#10;    @PostMapping(&quot;/api/popular-dados&quot;)&#10;    @ResponseBody&#10;    public String popularDados() {&#10;        try {&#10;            Integrante integrante1 = new Integrante();&#10;            integrante1.setFranquia(&quot;Apex Legends&quot;);&#10;            integrante1.setNome(&quot;Wraith&quot;);&#10;            integrante1.setFuncao(&quot;Assault&quot;);&#10;            integranteService.salvar(integrante1);&#10;            &#10;            Integrante integrante2 = new Integrante();&#10;            integrante2.setFranquia(&quot;Apex Legends&quot;);&#10;            integrante2.setNome(&quot;Lifeline&quot;);&#10;            integrante2.setFuncao(&quot;Support&quot;);&#10;            integranteService.salvar(integrante2);&#10;            &#10;            Integrante integrante3 = new Integrante();&#10;            integrante3.setFranquia(&quot;Counter Strike&quot;);&#10;            integrante3.setNome(&quot;S1mple&quot;);&#10;            integrante3.setFuncao(&quot;AWP&quot;);&#10;            integranteService.salvar(integrante3);&#10;            &#10;            Integrante integrante4 = new Integrante();&#10;            integrante4.setFranquia(&quot;Counter Strike&quot;);&#10;            integrante4.setNome(&quot;ZywOo&quot;);&#10;            integrante4.setFuncao(&quot;Rifler&quot;);&#10;            integranteService.salvar(integrante4);&#10;            &#10;            Time time1 = new Time();&#10;            time1.setData(LocalDate.of(2024, 1, 1));&#10;            timeService.salvar(time1, Arrays.asList(integrante1.getId(), integrante2.getId()));&#10;            &#10;            Time time2 = new Time();&#10;            time2.setData(LocalDate.of(2024, 1, 2));&#10;            timeService.salvar(time2, Arrays.asList(integrante3.getId(), integrante4.getId()));&#10;            &#10;            return &quot;Dados populados com sucesso!&quot;;&#10;        } catch (Exception e) {&#10;            return &quot;Erro ao popular dados: &quot; + e.getMessage();&#10;        }&#10;    }&#10;} " />
              <option name="updatedContent" value="package br.com.duxusdesafio.controller;&#10;&#10;import br.com.duxusdesafio.model.Integrante;&#10;import br.com.duxusdesafio.model.Time;&#10;import br.com.duxusdesafio.service.IntegranteService;&#10;import br.com.duxusdesafio.service.TimeService;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.stereotype.Controller;&#10;import org.springframework.web.bind.annotation.GetMapping;&#10;import org.springframework.web.bind.annotation.PostMapping;&#10;import org.springframework.web.bind.annotation.ResponseBody;&#10;&#10;import java.time.LocalDate;&#10;import java.util.Arrays;&#10;&#10;@Controller&#10;public class WebController {&#10;    &#10;    @Autowired&#10;    private IntegranteService integranteService;&#10;    &#10;    @Autowired&#10;    private TimeService timeService;&#10;    &#10;    @GetMapping(&quot;/&quot;)&#10;    public String index() {&#10;        return &quot;index&quot;;&#10;    }&#10;    &#10;    @GetMapping(&quot;/integrante&quot;)&#10;    public String integrante() {&#10;        return &quot;integrante&quot;;&#10;    }&#10;    &#10;    @GetMapping(&quot;/time&quot;)&#10;    public String time() {&#10;        return &quot;time&quot;;&#10;    }&#10;&#10;    @GetMapping(&quot;/analises&quot;)&#10;    public String analises() {&#10;        return &quot;analises&quot;;&#10;    }&#10;    &#10;    @PostMapping(&quot;/api/popular_dados&quot;)&#10;    @ResponseBody&#10;    public String popularDados() {&#10;        try {&#10;            Integrante integrante1 = new Integrante();&#10;            integrante1.setFranquia(&quot;Apex Legends&quot;);&#10;            integrante1.setNome(&quot;Wraith&quot;);&#10;            integrante1.setFuncao(&quot;Assault&quot;);&#10;            integranteService.salvar(integrante1);&#10;            &#10;            Integrante integrante2 = new Integrante();&#10;            integrante2.setFranquia(&quot;Apex Legends&quot;);&#10;            integrante2.setNome(&quot;Lifeline&quot;);&#10;            integrante2.setFuncao(&quot;Support&quot;);&#10;            integranteService.salvar(integrante2);&#10;            &#10;            Integrante integrante3 = new Integrante();&#10;            integrante3.setFranquia(&quot;Counter Strike&quot;);&#10;            integrante3.setNome(&quot;S1mple&quot;);&#10;            integrante3.setFuncao(&quot;AWP&quot;);&#10;            integranteService.salvar(integrante3);&#10;            &#10;            Integrante integrante4 = new Integrante();&#10;            integrante4.setFranquia(&quot;Counter Strike&quot;);&#10;            integrante4.setNome(&quot;ZywOo&quot;);&#10;            integrante4.setFuncao(&quot;Rifler&quot;);&#10;            integranteService.salvar(integrante4);&#10;            &#10;            Time time1 = new Time();&#10;            time1.setData(LocalDate.of(2024, 1, 1));&#10;            timeService.salvar(time1, Arrays.asList(integrante1.getId(), integrante2.getId()));&#10;            &#10;            Time time2 = new Time();&#10;            time2.setData(LocalDate.of(2024, 1, 2));&#10;            timeService.salvar(time2, Arrays.asList(integrante3.getId(), integrante4.getId()));&#10;            &#10;            return &quot;Dados populados com sucesso!&quot;;&#10;        } catch (Exception e) {&#10;            return &quot;Erro ao popular dados: &quot; + e.getMessage();&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/resources/templates/analises.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/resources/templates/analises.html" />
              <option name="originalContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;pt-BR&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#10;    &lt;title&gt;Análises de Times&lt;/title&gt;&#10;    &lt;link href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt;&#10;    &lt;link href=&quot;https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css&quot; rel=&quot;stylesheet&quot;&gt;&#10;    &lt;style&gt;&#10;        .analysis-card {&#10;            border: none;&#10;            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);&#10;            transition: transform 0.3s ease;&#10;        }&#10;        .analysis-card:hover {&#10;            transform: translateY(-2px);&#10;        }&#10;        .result-box {&#10;            background-color: #f8f9fa;&#10;            border-radius: 8px;&#10;            padding: 15px;&#10;            margin-top: 10px;&#10;        }&#10;    &lt;/style&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;    &lt;nav class=&quot;navbar navbar-expand-lg navbar-dark bg-dark&quot;&gt;&#10;        &lt;div class=&quot;container&quot;&gt;&#10;            &lt;a class=&quot;navbar-brand&quot; href=&quot;/&quot;&gt; Sistema de Escalação&lt;/a&gt;&#10;            &lt;div class=&quot;navbar-nav ms-auto&quot;&gt;&#10;                &lt;a class=&quot;nav-link&quot; href=&quot;/integrante&quot;&gt;Cadastrar Integrantes&lt;/a&gt;&#10;                &lt;a class=&quot;nav-link&quot; href=&quot;/time&quot;&gt;Montar Times&lt;/a&gt;&#10;                &lt;a class=&quot;nav-link active&quot; href=&quot;/analises&quot;&gt;Análises&lt;/a&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    &lt;/nav&gt;&#10;&#10;    &lt;div class=&quot;container mt-4&quot;&gt;&#10;        &lt;div class=&quot;row&quot;&gt;&#10;            &lt;div class=&quot;col-12&quot;&gt;&#10;                &lt;h2 class=&quot;mb-4&quot;&gt;&lt;i class=&quot;fas fa-chart-bar&quot;&gt;&lt;/i&gt; Análises de Times&lt;/h2&gt;&#10;                &#10;                &lt;!-- Filtros de Data --&gt;&#10;                &lt;div class=&quot;card mb-4&quot;&gt;&#10;                    &lt;div class=&quot;card-header&quot;&gt;&#10;                        &lt;h5&gt;&lt;i class=&quot;fas fa-calendar&quot;&gt;&lt;/i&gt; Filtros de Data (Opcional)&lt;/h5&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div class=&quot;card-body&quot;&gt;&#10;                        &lt;div class=&quot;row&quot;&gt;&#10;                            &lt;div class=&quot;col-md-6&quot;&gt;&#10;                                &lt;label for=&quot;dataInicial&quot; class=&quot;form-label&quot;&gt;Data Inicial&lt;/label&gt;&#10;                                &lt;input type=&quot;date&quot; class=&quot;form-control&quot; id=&quot;dataInicial&quot;&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;div class=&quot;col-md-6&quot;&gt;&#10;                                &lt;label for=&quot;dataFinal&quot; class=&quot;form-label&quot;&gt;Data Final&lt;/label&gt;&#10;                                &lt;input type=&quot;date&quot; class=&quot;form-control&quot; id=&quot;dataFinal&quot;&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;!-- Análises Disponíveis --&gt;&#10;                &lt;div class=&quot;row&quot;&gt;&#10;                    &lt;div class=&quot;col-md-6 mb-4&quot;&gt;&#10;                        &lt;div class=&quot;card analysis-card h-100&quot;&gt;&#10;                            &lt;div class=&quot;card-header&quot;&gt;&#10;                                &lt;h5&gt;&lt;i class=&quot;fas fa-users&quot;&gt;&lt;/i&gt; Integrante Mais Usado&lt;/h5&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;div class=&quot;card-body&quot;&gt;&#10;                                &lt;p class=&quot;text-muted&quot;&gt;Descobre qual integrante foi mais utilizado nos times&lt;/p&gt;&#10;                                &lt;button class=&quot;btn btn-primary&quot; onclick=&quot;analisarIntegranteMaisUsado()&quot;&gt;&#10;                                    &lt;i class=&quot;fas fa-search&quot;&gt;&lt;/i&gt; Analisar&#10;                                &lt;/button&gt;&#10;                                &lt;div id=&quot;resultIntegranteMaisUsado&quot; class=&quot;result-box d-none&quot;&gt;&lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div class=&quot;col-md-6 mb-4&quot;&gt;&#10;                        &lt;div class=&quot;card analysis-card h-100&quot;&gt;&#10;                            &lt;div class=&quot;card-header&quot;&gt;&#10;                                &lt;h5&gt;&lt;i class=&quot;fas fa-trophy&quot;&gt;&lt;/i&gt; Time Mais Comum&lt;/h5&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;div class=&quot;card-body&quot;&gt;&#10;                                &lt;p class=&quot;text-muted&quot;&gt;Identifica a composição de time mais frequente&lt;/p&gt;&#10;                                &lt;button class=&quot;btn btn-success&quot; onclick=&quot;analisarTimeMaisComum()&quot;&gt;&#10;                                    &lt;i class=&quot;fas fa-search&quot;&gt;&lt;/i&gt; Analisar&#10;                                &lt;/button&gt;&#10;                                &lt;div id=&quot;resultTimeMaisComum&quot; class=&quot;result-box d-none&quot;&gt;&lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div class=&quot;col-md-6 mb-4&quot;&gt;&#10;                        &lt;div class=&quot;card analysis-card h-100&quot;&gt;&#10;                            &lt;div class=&quot;card-header&quot;&gt;&#10;                                &lt;h5&gt;&lt;i class=&quot;fas fa-tag&quot;&gt;&lt;/i&gt; Função Mais Comum&lt;/h5&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;div class=&quot;card-body&quot;&gt;&#10;                                &lt;p class=&quot;text-muted&quot;&gt;Descobre qual função é mais utilizada&lt;/p&gt;&#10;                                &lt;button class=&quot;btn btn-info&quot; onclick=&quot;analisarFuncaoMaisComum()&quot;&gt;&#10;                                    &lt;i class=&quot;fas fa-search&quot;&gt;&lt;/i&gt; Analisar&#10;                                &lt;/button&gt;&#10;                                &lt;div id=&quot;resultFuncaoMaisComum&quot; class=&quot;result-box d-none&quot;&gt;&lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div class=&quot;col-md-6 mb-4&quot;&gt;&#10;                        &lt;div class=&quot;card analysis-card h-100&quot;&gt;&#10;                            &lt;div class=&quot;card-header&quot;&gt;&#10;                                &lt;h5&gt;&lt;i class=&quot;fas fa-gamepad&quot;&gt;&lt;/i&gt; Franquia Mais Famosa&lt;/h5&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;div class=&quot;card-body&quot;&gt;&#10;                                &lt;p class=&quot;text-muted&quot;&gt;Identifica a franquia mais popular&lt;/p&gt;&#10;                                &lt;button class=&quot;btn btn-warning&quot; onclick=&quot;analisarFranquiaMaisFamosa()&quot;&gt;&#10;                                    &lt;i class=&quot;fas fa-search&quot;&gt;&lt;/i&gt; Analisar&#10;                                &lt;/button&gt;&#10;                                &lt;div id=&quot;resultFranquiaMaisFamosa&quot; class=&quot;result-box d-none&quot;&gt;&lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div class=&quot;col-md-6 mb-4&quot;&gt;&#10;                        &lt;div class=&quot;card analysis-card h-100&quot;&gt;&#10;                            &lt;div class=&quot;card-header&quot;&gt;&#10;                                &lt;h5&gt;&lt;i class=&quot;fas fa-chart-pie&quot;&gt;&lt;/i&gt; Contagem por Franquia&lt;/h5&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;div class=&quot;card-body&quot;&gt;&#10;                                &lt;p class=&quot;text-muted&quot;&gt;Mostra quantos integrantes por franquia&lt;/p&gt;&#10;                                &lt;button class=&quot;btn btn-secondary&quot; onclick=&quot;analisarContagemPorFranquia()&quot;&gt;&#10;                                    &lt;i class=&quot;fas fa-search&quot;&gt;&lt;/i&gt; Analisar&#10;                                &lt;/button&gt;&#10;                                &lt;div id=&quot;resultContagemPorFranquia&quot; class=&quot;result-box d-none&quot;&gt;&lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div class=&quot;col-md-6 mb-4&quot;&gt;&#10;                        &lt;div class=&quot;card analysis-card h-100&quot;&gt;&#10;                            &lt;div class=&quot;card-header&quot;&gt;&#10;                                &lt;h5&gt;&lt;i class=&quot;fas fa-chart-bar&quot;&gt;&lt;/i&gt; Contagem por Função&lt;/h5&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;div class=&quot;card-body&quot;&gt;&#10;                                &lt;p class=&quot;text-muted&quot;&gt;Mostra quantos integrantes por função&lt;/p&gt;&#10;                                &lt;button class=&quot;btn btn-dark&quot; onclick=&quot;analisarContagemPorFuncao()&quot;&gt;&#10;                                    &lt;i class=&quot;fas fa-search&quot;&gt;&lt;/i&gt; Analisar&#10;                                &lt;/button&gt;&#10;                                &lt;div id=&quot;resultContagemPorFuncao&quot; class=&quot;result-box d-none&quot;&gt;&lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;!-- Análise Específica por Data --&gt;&#10;                &lt;div class=&quot;row mt-4&quot;&gt;&#10;                    &lt;div class=&quot;col-12&quot;&gt;&#10;                        &lt;div class=&quot;card&quot;&gt;&#10;                            &lt;div class=&quot;card-header&quot;&gt;&#10;                                &lt;h5&gt;&lt;i class=&quot;fas fa-calendar-day&quot;&gt;&lt;/i&gt; Time de uma Data Específica&lt;/h5&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;div class=&quot;card-body&quot;&gt;&#10;                                &lt;div class=&quot;row&quot;&gt;&#10;                                    &lt;div class=&quot;col-md-6&quot;&gt;&#10;                                        &lt;label for=&quot;dataEspecifica&quot; class=&quot;form-label&quot;&gt;Data&lt;/label&gt;&#10;                                        &lt;input type=&quot;date&quot; class=&quot;form-control&quot; id=&quot;dataEspecifica&quot; value=&quot;2024-01-01&quot;&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;div class=&quot;col-md-6 d-flex align-items-end&quot;&gt;&#10;                                        &lt;button class=&quot;btn btn-primary&quot; onclick=&quot;analisarTimeDaData()&quot;&gt;&#10;                                            &lt;i class=&quot;fas fa-search&quot;&gt;&lt;/i&gt; Buscar Time&#10;                                        &lt;/button&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div id=&quot;resultTimeDaData&quot; class=&quot;result-box d-none mt-3&quot;&gt;&lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js&quot;&gt;&lt;/script&gt;&#10;    &lt;script&gt;&#10;        function getParametrosData() {&#10;            const dataInicial = document.getElementById('dataInicial').value;&#10;            const dataFinal = document.getElementById('dataFinal').value;&#10;            &#10;            let params = '';&#10;            if (dataInicial) params += `dataInicial=${dataInicial}`;&#10;            if (dataFinal) {&#10;                if (params) params += '&amp;';&#10;                params += `dataFinal=${dataFinal}`;&#10;            }&#10;            return params;&#10;        }&#10;&#10;        function mostrarResultado(elementId, resultado, tipo = 'success') {&#10;            const element = document.getElementById(elementId);&#10;            element.classList.remove('d-none');&#10;            &#10;            if (tipo === 'error') {&#10;                element.innerHTML = `&lt;div class=&quot;alert alert-danger&quot;&gt;&lt;i class=&quot;fas fa-exclamation-triangle&quot;&gt;&lt;/i&gt; ${resultado}&lt;/div&gt;`;&#10;            } else if (tipo === 'empty') {&#10;                element.innerHTML = `&lt;div class=&quot;alert alert-warning&quot;&gt;&lt;i class=&quot;fas fa-info-circle&quot;&gt;&lt;/i&gt; ${resultado}&lt;/div&gt;`;&#10;            } else {&#10;                element.innerHTML = `&lt;div class=&quot;alert alert-success&quot;&gt;&lt;i class=&quot;fas fa-check-circle&quot;&gt;&lt;/i&gt; ${resultado}&lt;/div&gt;`;&#10;            }&#10;        }&#10;&#10;        function analisarIntegranteMaisUsado() {&#10;            const params = getParametrosData();&#10;            const url = `/api/IntegranteMaisUsado${params ? '?' + params : ''}`;&#10;            &#10;            fetch(url)&#10;            .then(response =&gt; response.json())&#10;            .then(data =&gt; {&#10;                if (data.id) {&#10;                    const resultado = `Integrante mais usado: &lt;strong&gt;${data.nome}&lt;/strong&gt; (${data.franquia} - ${data.funcao})`;&#10;                    mostrarResultado('resultIntegranteMaisUsado', resultado);&#10;                } else {&#10;                    mostrarResultado('resultIntegranteMaisUsado', 'Nenhum integrante encontrado', 'empty');&#10;                }&#10;            })&#10;            .catch(error =&gt; {&#10;                mostrarResultado('resultIntegranteMaisUsado', 'Erro ao analisar integrante mais usado', 'error');&#10;            });&#10;        }&#10;&#10;        function analisarTimeMaisComum() {&#10;            const params = getParametrosData();&#10;            const url = `/api/TimeMaisComum${params ? '?' + params : ''}`;&#10;            &#10;            fetch(url)&#10;            .then(response =&gt; response.json())&#10;            .then(data =&gt; {&#10;                if (data.integrantes &amp;&amp; data.integrantes.length &gt; 0) {&#10;                    const resultado = `Time mais comum: &lt;strong&gt;${data.integrantes.join(', ')}&lt;/strong&gt;`;&#10;                    mostrarResultado('resultTimeMaisComum', resultado);&#10;                } else {&#10;                    mostrarResultado('resultTimeMaisComum', 'Nenhum time encontrado', 'empty');&#10;                }&#10;            })&#10;            .catch(error =&gt; {&#10;                mostrarResultado('resultTimeMaisComum', 'Erro ao analisar time mais comum', 'error');&#10;            });&#10;        }&#10;&#10;        function analisarFuncaoMaisComum() {&#10;            const params = getParametrosData();&#10;            const url = `/api/FuncaoMaisComum${params ? '?' + params : ''}`;&#10;            &#10;            fetch(url)&#10;            .then(response =&gt; response.json())&#10;            .then(data =&gt; {&#10;                if (data.Função) {&#10;                    const resultado = `Função mais comum: &lt;strong&gt;${data.Função}&lt;/strong&gt;`;&#10;                    mostrarResultado('resultFuncaoMaisComum', resultado);&#10;                } else {&#10;                    mostrarResultado('resultFuncaoMaisComum', 'Nenhuma função encontrada', 'empty');&#10;                }&#10;            })&#10;            .catch(error =&gt; {&#10;                mostrarResultado('resultFuncaoMaisComum', 'Erro ao analisar função mais comum', 'error');&#10;            });&#10;        }&#10;&#10;        function analisarFranquiaMaisFamosa() {&#10;            const params = getParametrosData();&#10;            const url = `/api/FranquiaMaisFamosa${params ? '?' + params : ''}`;&#10;            &#10;            fetch(url)&#10;            .then(response =&gt; response.json())&#10;            .then(data =&gt; {&#10;                if (data.franquia) {&#10;                    const resultado = `Franquia mais famosa: &lt;strong&gt;${data.franquia}&lt;/strong&gt;`;&#10;                    mostrarResultado('resultFranquiaMaisFamosa', resultado);&#10;                } else {&#10;                    mostrarResultado('resultFranquiaMaisFamosa', 'Nenhuma franquia encontrada', 'empty');&#10;                }&#10;            })&#10;            .catch(error =&gt; {&#10;                mostrarResultado('resultFranquiaMaisFamosa', 'Erro ao analisar franquia mais famosa', 'error');&#10;            });&#10;        }&#10;&#10;        function analisarContagemPorFranquia() {&#10;            const params = getParametrosData();&#10;            const url = `/api/ContagemPorFranquia${params ? '?' + params : ''}`;&#10;            &#10;            fetch(url)&#10;            .then(response =&gt; response.json())&#10;            .then(data =&gt; {&#10;                if (Object.keys(data).length &gt; 0) {&#10;                    const resultado = Object.entries(data)&#10;                        .map(([franquia, count]) =&gt; `&lt;strong&gt;${franquia}&lt;/strong&gt;: ${count}`)&#10;                        .join(', ');&#10;                    mostrarResultado('resultContagemPorFranquia', `Contagem por franquia: ${resultado}`);&#10;                } else {&#10;                    mostrarResultado('resultContagemPorFranquia', 'Nenhuma franquia encontrada', 'empty');&#10;                }&#10;            })&#10;            .catch(error =&gt; {&#10;                mostrarResultado('resultContagemPorFranquia', 'Erro ao analisar contagem por franquia', 'error');&#10;            });&#10;        }&#10;&#10;        function analisarContagemPorFuncao() {&#10;            const params = getParametrosData();&#10;            const url = `/api/ContagemPorFuncao${params ? '?' + params : ''}`;&#10;            &#10;            fetch(url)&#10;            .then(response =&gt; response.json())&#10;            .then(data =&gt; {&#10;                if (Object.keys(data).length &gt; 0) {&#10;                    const resultado = Object.entries(data)&#10;                        .map(([funcao, count]) =&gt; `&lt;strong&gt;${funcao}&lt;/strong&gt;: ${count}`)&#10;                        .join(', ');&#10;                    mostrarResultado('resultContagemPorFuncao', `Contagem por função: ${resultado}`);&#10;                } else {&#10;                    mostrarResultado('resultContagemPorFuncao', 'Nenhuma função encontrada', 'empty');&#10;                }&#10;            })&#10;            .catch(error =&gt; {&#10;                mostrarResultado('resultContagemPorFuncao', 'Erro ao analisar contagem por função', 'error');&#10;            });&#10;        }&#10;&#10;        function analisarTimeDaData() {&#10;            const data = document.getElementById('dataEspecifica').value;&#10;            if (!data) {&#10;                alert('Por favor, selecione uma data');&#10;                return;&#10;            }&#10;            &#10;            fetch(`/api/TimeDaData?data=${data}`)&#10;            .then(response =&gt; {&#10;                if (response.ok) {&#10;                    return response.json();&#10;                } else {&#10;                    throw new Error('Time não encontrado para esta data');&#10;                }&#10;            })&#10;            .then(data =&gt; {&#10;                if (data.integrantes &amp;&amp; data.integrantes.length &gt; 0) {&#10;                    const resultado = `Time de ${data.data}: &lt;strong&gt;${data.integrantes.join(', ')}&lt;/strong&gt;`;&#10;                    mostrarResultado('resultTimeDaData', resultado);&#10;                } else {&#10;                    mostrarResultado('resultTimeDaData', 'Nenhum time encontrado para esta data', 'empty');&#10;                }&#10;            })&#10;            .catch(error =&gt; {&#10;                mostrarResultado('resultTimeDaData', error.message, 'error');&#10;            });&#10;        }&#10;    &lt;/script&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt; " />
              <option name="updatedContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;pt-BR&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#10;    &lt;title&gt;Análises de Times&lt;/title&gt;&#10;    &lt;link href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt;&#10;    &lt;link href=&quot;https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css&quot; rel=&quot;stylesheet&quot;&gt;&#10;    &lt;style&gt;&#10;        .analysis-card {&#10;            border: none;&#10;            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);&#10;            transition: transform 0.3s ease;&#10;        }&#10;        .analysis-card:hover {&#10;            transform: translateY(-2px);&#10;        }&#10;        .result-box {&#10;            background-color: #f8f9fa;&#10;            border-radius: 8px;&#10;            padding: 15px;&#10;            margin-top: 10px;&#10;        }&#10;    &lt;/style&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;    &lt;nav class=&quot;navbar navbar-expand-lg navbar-dark bg-dark&quot;&gt;&#10;        &lt;div class=&quot;container&quot;&gt;&#10;            &lt;a class=&quot;navbar-brand&quot; href=&quot;/&quot;&gt; Sistema de Escalação&lt;/a&gt;&#10;            &lt;div class=&quot;navbar-nav ms-auto&quot;&gt;&#10;                &lt;a class=&quot;nav-link&quot; href=&quot;/integrante&quot;&gt;Cadastrar Integrantes&lt;/a&gt;&#10;                &lt;a class=&quot;nav-link&quot; href=&quot;/time&quot;&gt;Montar Times&lt;/a&gt;&#10;                &lt;a class=&quot;nav-link active&quot; href=&quot;/analises&quot;&gt;Análises&lt;/a&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    &lt;/nav&gt;&#10;&#10;    &lt;div class=&quot;container mt-4&quot;&gt;&#10;        &lt;div class=&quot;row&quot;&gt;&#10;            &lt;div class=&quot;col-12&quot;&gt;&#10;                &lt;h2 class=&quot;mb-4&quot;&gt;&lt;i class=&quot;fas fa-chart-bar&quot;&gt;&lt;/i&gt; Análises de Times&lt;/h2&gt;&#10;                &#10;                &lt;!-- Filtros de Data --&gt;&#10;                &lt;div class=&quot;card mb-4&quot;&gt;&#10;                    &lt;div class=&quot;card-header&quot;&gt;&#10;                        &lt;h5&gt;&lt;i class=&quot;fas fa-calendar&quot;&gt;&lt;/i&gt; Filtros de Data (Opcional)&lt;/h5&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div class=&quot;card-body&quot;&gt;&#10;                        &lt;div class=&quot;row&quot;&gt;&#10;                            &lt;div class=&quot;col-md-6&quot;&gt;&#10;                                &lt;label for=&quot;dataInicial&quot; class=&quot;form-label&quot;&gt;Data Inicial&lt;/label&gt;&#10;                                &lt;input type=&quot;date&quot; class=&quot;form-control&quot; id=&quot;dataInicial&quot;&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;div class=&quot;col-md-6&quot;&gt;&#10;                                &lt;label for=&quot;dataFinal&quot; class=&quot;form-label&quot;&gt;Data Final&lt;/label&gt;&#10;                                &lt;input type=&quot;date&quot; class=&quot;form-control&quot; id=&quot;dataFinal&quot;&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;!-- Análises Disponíveis --&gt;&#10;                &lt;div class=&quot;row&quot;&gt;&#10;                    &lt;div class=&quot;col-md-6 mb-4&quot;&gt;&#10;                        &lt;div class=&quot;card analysis-card h-100&quot;&gt;&#10;                            &lt;div class=&quot;card-header&quot;&gt;&#10;                                &lt;h5&gt;&lt;i class=&quot;fas fa-users&quot;&gt;&lt;/i&gt; Integrante Mais Usado&lt;/h5&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;div class=&quot;card-body&quot;&gt;&#10;                                &lt;p class=&quot;text-muted&quot;&gt;Descobre qual integrante foi mais utilizado nos times&lt;/p&gt;&#10;                                &lt;button class=&quot;btn btn-primary&quot; onclick=&quot;analisarIntegranteMaisUsado()&quot;&gt;&#10;                                    &lt;i class=&quot;fas fa-search&quot;&gt;&lt;/i&gt; Analisar&#10;                                &lt;/button&gt;&#10;                                &lt;div id=&quot;resultIntegranteMaisUsado&quot; class=&quot;result-box d-none&quot;&gt;&lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div class=&quot;col-md-6 mb-4&quot;&gt;&#10;                        &lt;div class=&quot;card analysis-card h-100&quot;&gt;&#10;                            &lt;div class=&quot;card-header&quot;&gt;&#10;                                &lt;h5&gt;&lt;i class=&quot;fas fa-trophy&quot;&gt;&lt;/i&gt; Time Mais Comum&lt;/h5&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;div class=&quot;card-body&quot;&gt;&#10;                                &lt;p class=&quot;text-muted&quot;&gt;Identifica a composição de time mais frequente&lt;/p&gt;&#10;                                &lt;button class=&quot;btn btn-success&quot; onclick=&quot;analisarTimeMaisComum()&quot;&gt;&#10;                                    &lt;i class=&quot;fas fa-search&quot;&gt;&lt;/i&gt; Analisar&#10;                                &lt;/button&gt;&#10;                                &lt;div id=&quot;resultTimeMaisComum&quot; class=&quot;result-box d-none&quot;&gt;&lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div class=&quot;col-md-6 mb-4&quot;&gt;&#10;                        &lt;div class=&quot;card analysis-card h-100&quot;&gt;&#10;                            &lt;div class=&quot;card-header&quot;&gt;&#10;                                &lt;h5&gt;&lt;i class=&quot;fas fa-tag&quot;&gt;&lt;/i&gt; Função Mais Comum&lt;/h5&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;div class=&quot;card-body&quot;&gt;&#10;                                &lt;p class=&quot;text-muted&quot;&gt;Descobre qual função é mais utilizada&lt;/p&gt;&#10;                                &lt;button class=&quot;btn btn-info&quot; onclick=&quot;analisarFuncaoMaisComum()&quot;&gt;&#10;                                    &lt;i class=&quot;fas fa-search&quot;&gt;&lt;/i&gt; Analisar&#10;                                &lt;/button&gt;&#10;                                &lt;div id=&quot;resultFuncaoMaisComum&quot; class=&quot;result-box d-none&quot;&gt;&lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div class=&quot;col-md-6 mb-4&quot;&gt;&#10;                        &lt;div class=&quot;card analysis-card h-100&quot;&gt;&#10;                            &lt;div class=&quot;card-header&quot;&gt;&#10;                                &lt;h5&gt;&lt;i class=&quot;fas fa-gamepad&quot;&gt;&lt;/i&gt; Franquia Mais Famosa&lt;/h5&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;div class=&quot;card-body&quot;&gt;&#10;                                &lt;p class=&quot;text-muted&quot;&gt;Identifica a franquia mais popular&lt;/p&gt;&#10;                                &lt;button class=&quot;btn btn-warning&quot; onclick=&quot;analisarFranquiaMaisFamosa()&quot;&gt;&#10;                                    &lt;i class=&quot;fas fa-search&quot;&gt;&lt;/i&gt; Analisar&#10;                                &lt;/button&gt;&#10;                                &lt;div id=&quot;resultFranquiaMaisFamosa&quot; class=&quot;result-box d-none&quot;&gt;&lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div class=&quot;col-md-6 mb-4&quot;&gt;&#10;                        &lt;div class=&quot;card analysis-card h-100&quot;&gt;&#10;                            &lt;div class=&quot;card-header&quot;&gt;&#10;                                &lt;h5&gt;&lt;i class=&quot;fas fa-chart-pie&quot;&gt;&lt;/i&gt; Contagem por Franquia&lt;/h5&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;div class=&quot;card-body&quot;&gt;&#10;                                &lt;p class=&quot;text-muted&quot;&gt;Mostra quantos integrantes por franquia&lt;/p&gt;&#10;                                &lt;button class=&quot;btn btn-secondary&quot; onclick=&quot;analisarContagemPorFranquia()&quot;&gt;&#10;                                    &lt;i class=&quot;fas fa-search&quot;&gt;&lt;/i&gt; Analisar&#10;                                &lt;/button&gt;&#10;                                &lt;div id=&quot;resultContagemPorFranquia&quot; class=&quot;result-box d-none&quot;&gt;&lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div class=&quot;col-md-6 mb-4&quot;&gt;&#10;                        &lt;div class=&quot;card analysis-card h-100&quot;&gt;&#10;                            &lt;div class=&quot;card-header&quot;&gt;&#10;                                &lt;h5&gt;&lt;i class=&quot;fas fa-chart-bar&quot;&gt;&lt;/i&gt; Contagem por Função&lt;/h5&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;div class=&quot;card-body&quot;&gt;&#10;                                &lt;p class=&quot;text-muted&quot;&gt;Mostra quantos integrantes por função&lt;/p&gt;&#10;                                &lt;button class=&quot;btn btn-dark&quot; onclick=&quot;analisarContagemPorFuncao()&quot;&gt;&#10;                                    &lt;i class=&quot;fas fa-search&quot;&gt;&lt;/i&gt; Analisar&#10;                                &lt;/button&gt;&#10;                                &lt;div id=&quot;resultContagemPorFuncao&quot; class=&quot;result-box d-none&quot;&gt;&lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;!-- Análise Específica por Data --&gt;&#10;                &lt;div class=&quot;row mt-4&quot;&gt;&#10;                    &lt;div class=&quot;col-12&quot;&gt;&#10;                        &lt;div class=&quot;card&quot;&gt;&#10;                            &lt;div class=&quot;card-header&quot;&gt;&#10;                                &lt;h5&gt;&lt;i class=&quot;fas fa-calendar-day&quot;&gt;&lt;/i&gt; Time de uma Data Específica&lt;/h5&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;div class=&quot;card-body&quot;&gt;&#10;                                &lt;div class=&quot;row&quot;&gt;&#10;                                    &lt;div class=&quot;col-md-6&quot;&gt;&#10;                                        &lt;label for=&quot;dataEspecifica&quot; class=&quot;form-label&quot;&gt;Data&lt;/label&gt;&#10;                                        &lt;input type=&quot;date&quot; class=&quot;form-control&quot; id=&quot;dataEspecifica&quot; value=&quot;2024-01-01&quot;&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;div class=&quot;col-md-6 d-flex align-items-end&quot;&gt;&#10;                                        &lt;button class=&quot;btn btn-primary&quot; onclick=&quot;analisarTimeDaData()&quot;&gt;&#10;                                            &lt;i class=&quot;fas fa-search&quot;&gt;&lt;/i&gt; Buscar Time&#10;                                        &lt;/button&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div id=&quot;resultTimeDaData&quot; class=&quot;result-box d-none mt-3&quot;&gt;&lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js&quot;&gt;&lt;/script&gt;&#10;    &lt;script&gt;&#10;        function getParametrosData() {&#10;            const dataInicial = document.getElementById('dataInicial').value;&#10;            const dataFinal = document.getElementById('dataFinal').value;&#10;            &#10;            let params = '';&#10;            if (dataInicial) params += `dataInicial=${dataInicial}`;&#10;            if (dataFinal) {&#10;                if (params) params += '&amp;';&#10;                params += `dataFinal=${dataFinal}`;&#10;            }&#10;            return params;&#10;        }&#10;&#10;        function mostrarResultado(elementId, resultado, tipo = 'success') {&#10;            const element = document.getElementById(elementId);&#10;            element.classList.remove('d-none');&#10;            &#10;            if (tipo === 'error') {&#10;                element.innerHTML = `&lt;div class=&quot;alert alert-danger&quot;&gt;&lt;i class=&quot;fas fa-exclamation-triangle&quot;&gt;&lt;/i&gt; ${resultado}&lt;/div&gt;`;&#10;            } else if (tipo === 'empty') {&#10;                element.innerHTML = `&lt;div class=&quot;alert alert-warning&quot;&gt;&lt;i class=&quot;fas fa-info-circle&quot;&gt;&lt;/i&gt; ${resultado}&lt;/div&gt;`;&#10;            } else {&#10;                element.innerHTML = `&lt;div class=&quot;alert alert-success&quot;&gt;&lt;i class=&quot;fas fa-check-circle&quot;&gt;&lt;/i&gt; ${resultado}&lt;/div&gt;`;&#10;            }&#10;        }&#10;&#10;        function analisarIntegranteMaisUsado() {&#10;            const params = getParametrosData();&#10;            const url = `/api/integrante_mais_usado${params ? '?' + params : ''}`;&#10;            &#10;            fetch(url)&#10;            .then(response =&gt; response.json())&#10;            .then(data =&gt; {&#10;                if (data.id) {&#10;                    const resultado = `Integrante mais usado: &lt;strong&gt;${data.nome}&lt;/strong&gt; (${data.franquia} - ${data.funcao})`;&#10;                    mostrarResultado('resultIntegranteMaisUsado', resultado);&#10;                } else {&#10;                    mostrarResultado('resultIntegranteMaisUsado', 'Nenhum integrante encontrado', 'empty');&#10;                }&#10;            })&#10;            .catch(error =&gt; {&#10;                mostrarResultado('resultIntegranteMaisUsado', 'Erro ao analisar integrante mais usado', 'error');&#10;            });&#10;        }&#10;&#10;        function analisarTimeMaisComum() {&#10;            const params = getParametrosData();&#10;            const url = `/api/time_mais_comum${params ? '?' + params : ''}`;&#10;            &#10;            fetch(url)&#10;            .then(response =&gt; response.json())&#10;            .then(data =&gt; {&#10;                if (data.integrantes &amp;&amp; data.integrantes.length &gt; 0) {&#10;                    const resultado = `Time mais comum: &lt;strong&gt;${data.integrantes.join(', ')}&lt;/strong&gt;`;&#10;                    mostrarResultado('resultTimeMaisComum', resultado);&#10;                } else {&#10;                    mostrarResultado('resultTimeMaisComum', 'Nenhum time encontrado', 'empty');&#10;                }&#10;            })&#10;            .catch(error =&gt; {&#10;                mostrarResultado('resultTimeMaisComum', 'Erro ao analisar time mais comum', 'error');&#10;            });&#10;        }&#10;&#10;        function analisarFuncaoMaisComum() {&#10;            const params = getParametrosData();&#10;            const url = `/api/funcao_mais_comum${params ? '?' + params : ''}`;&#10;            &#10;            fetch(url)&#10;            .then(response =&gt; response.json())&#10;            .then(data =&gt; {&#10;                if (data.Função) {&#10;                    const resultado = `Função mais comum: &lt;strong&gt;${data.Função}&lt;/strong&gt;`;&#10;                    mostrarResultado('resultFuncaoMaisComum', resultado);&#10;                } else {&#10;                    mostrarResultado('resultFuncaoMaisComum', 'Nenhuma função encontrada', 'empty');&#10;                }&#10;            })&#10;            .catch(error =&gt; {&#10;                mostrarResultado('resultFuncaoMaisComum', 'Erro ao analisar função mais comum', 'error');&#10;            });&#10;        }&#10;&#10;        function analisarFranquiaMaisFamosa() {&#10;            const params = getParametrosData();&#10;            const url = `/api/franquia_mais_famosa${params ? '?' + params : ''}`;&#10;            &#10;            fetch(url)&#10;            .then(response =&gt; response.json())&#10;            .then(data =&gt; {&#10;                if (data.franquia) {&#10;                    const resultado = `Franquia mais famosa: &lt;strong&gt;${data.franquia}&lt;/strong&gt;`;&#10;                    mostrarResultado('resultFranquiaMaisFamosa', resultado);&#10;                } else {&#10;                    mostrarResultado('resultFranquiaMaisFamosa', 'Nenhuma franquia encontrada', 'empty');&#10;                }&#10;            })&#10;            .catch(error =&gt; {&#10;                mostrarResultado('resultFranquiaMaisFamosa', 'Erro ao analisar franquia mais famosa', 'error');&#10;            });&#10;        }&#10;&#10;        function analisarContagemPorFranquia() {&#10;            const params = getParametrosData();&#10;            const url = `/api/contagem_por_franquia${params ? '?' + params : ''}`;&#10;            &#10;            fetch(url)&#10;            .then(response =&gt; response.json())&#10;            .then(data =&gt; {&#10;                if (Object.keys(data).length &gt; 0) {&#10;                    const resultado = Object.entries(data)&#10;                        .map(([franquia, count]) =&gt; `&lt;strong&gt;${franquia}&lt;/strong&gt;: ${count}`)&#10;                        .join(', ');&#10;                    mostrarResultado('resultContagemPorFranquia', `Contagem por franquia: ${resultado}`);&#10;                } else {&#10;                    mostrarResultado('resultContagemPorFranquia', 'Nenhuma franquia encontrada', 'empty');&#10;                }&#10;            })&#10;            .catch(error =&gt; {&#10;                mostrarResultado('resultContagemPorFranquia', 'Erro ao analisar contagem por franquia', 'error');&#10;            });&#10;        }&#10;&#10;        function analisarContagemPorFuncao() {&#10;            const params = getParametrosData();&#10;            const url = `/api/contagem_por_funcao${params ? '?' + params : ''}`;&#10;            &#10;            fetch(url)&#10;            .then(response =&gt; response.json())&#10;            .then(data =&gt; {&#10;                if (Object.keys(data).length &gt; 0) {&#10;                    const resultado = Object.entries(data)&#10;                        .map(([funcao, count]) =&gt; `&lt;strong&gt;${funcao}&lt;/strong&gt;: ${count}`)&#10;                        .join(', ');&#10;                    mostrarResultado('resultContagemPorFuncao', `Contagem por função: ${resultado}`);&#10;                } else {&#10;                    mostrarResultado('resultContagemPorFuncao', 'Nenhuma função encontrada', 'empty');&#10;                }&#10;            })&#10;            .catch(error =&gt; {&#10;                mostrarResultado('resultContagemPorFuncao', 'Erro ao analisar contagem por função', 'error');&#10;            });&#10;        }&#10;&#10;        function analisarTimeDaData() {&#10;            const data = document.getElementById('dataEspecifica').value;&#10;            if (!data) {&#10;                alert('Por favor, selecione uma data');&#10;                return;&#10;            }&#10;            &#10;            fetch(`/api/time_da_data?data=${data}`)&#10;            .then(response =&gt; {&#10;                if (response.ok) {&#10;                    return response.json();&#10;                } else {&#10;                    throw new Error('Time não encontrado para esta data');&#10;                }&#10;            })&#10;            .then(data =&gt; {&#10;                if (data.integrantes &amp;&amp; data.integrantes.length &gt; 0) {&#10;                    const resultado = `Time de ${data.data}: &lt;strong&gt;${data.integrantes.join(', ')}&lt;/strong&gt;`;&#10;                    mostrarResultado('resultTimeDaData', resultado);&#10;                } else {&#10;                    mostrarResultado('resultTimeDaData', 'Nenhum time encontrado para esta data', 'empty');&#10;                }&#10;            })&#10;            .catch(error =&gt; {&#10;                mostrarResultado('resultTimeDaData', error.message, 'error');&#10;            });&#10;        }&#10;    &lt;/script&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/resources/templates/index.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/resources/templates/index.html" />
              <option name="originalContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;pt-BR&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#10;    &lt;title&gt;Sistema de Escalação de Times&lt;/title&gt;&#10;    &lt;link href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt;&#10;    &lt;style&gt;&#10;        .hero-section {&#10;            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);&#10;            color: white;&#10;            padding: 100px 0;&#10;        }&#10;        .feature-card {&#10;            border: none;&#10;            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);&#10;            transition: transform 0.3s ease;&#10;        }&#10;        .feature-card:hover {&#10;            transform: translateY(-5px);&#10;        }&#10;    &lt;/style&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;    &lt;nav class=&quot;navbar navbar-expand-lg navbar-dark bg-dark&quot;&gt;&#10;        &lt;div class=&quot;container&quot;&gt;&#10;            &lt;a class=&quot;navbar-brand&quot; href=&quot;/&quot;&gt; Sistema de Escalação&lt;/a&gt;&#10;            &lt;div class=&quot;navbar-nav ms-auto&quot;&gt;&#10;                &lt;a class=&quot;nav-link&quot; href=&quot;/integrante&quot;&gt;Cadastrar Integrantes&lt;/a&gt;&#10;                &lt;a class=&quot;nav-link&quot; href=&quot;/time&quot;&gt;Montar Times&lt;/a&gt;&#10;                &lt;a class=&quot;nav-link&quot; href=&quot;/analises&quot;&gt;Análises&lt;/a&gt;&#10;                &lt;a class=&quot;nav-link&quot; href=&quot;/api/integrantes&quot; target=&quot;_blank&quot;&gt;API Integrantes&lt;/a&gt;&#10;                &lt;a class=&quot;nav-link&quot; href=&quot;/api/times&quot; target=&quot;_blank&quot;&gt;API Times&lt;/a&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    &lt;/nav&gt;&#10;&#10;    &lt;section class=&quot;hero-section&quot;&gt;&#10;        &lt;div class=&quot;container text-center&quot;&gt;&#10;            &lt;h1 class=&quot;display-4 mb-4&quot;&gt;Sistema de Escalação de Times&lt;/h1&gt;&#10;            &lt;p class=&quot;lead mb-5&quot;&gt;Gerencie seus times e integrantes de forma eficiente&lt;/p&gt;&#10;            &lt;div class=&quot;row&quot;&gt;&#10;                &lt;div class=&quot;col-md-6&quot;&gt;&#10;                    &lt;a href=&quot;/integrante&quot; class=&quot;btn btn-light btn-lg me-3&quot;&gt;&#10;                         Cadastrar Integrantes&#10;                    &lt;/a&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;col-md-6&quot;&gt;&#10;                    &lt;a href=&quot;/time&quot; class=&quot;btn btn-outline-light btn-lg&quot;&gt;&#10;                        ⚽ Montar Times&#10;                    &lt;/a&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    &lt;/section&gt;&#10;&#10;    &lt;div class=&quot;container mt-5&quot;&gt;&#10;        &lt;div class=&quot;row&quot;&gt;&#10;            &lt;div class=&quot;col-md-4 mb-4&quot;&gt;&#10;                &lt;div class=&quot;card feature-card h-100&quot;&gt;&#10;                    &lt;div class=&quot;card-body text-center&quot;&gt;&#10;                        &lt;h3&gt; Integrantes&lt;/h3&gt;&#10;                        &lt;p&gt;Cadastre jogadores, atletas ou personagens para seus times&lt;/p&gt;&#10;                        &lt;a href=&quot;/integrante&quot; class=&quot;btn btn-primary&quot;&gt;Gerenciar&lt;/a&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;            &lt;div class=&quot;col-md-4 mb-4&quot;&gt;&#10;                &lt;div class=&quot;card feature-card h-100&quot;&gt;&#10;                    &lt;div class=&quot;card-body text-center&quot;&gt;&#10;                        &lt;h3&gt; Times&lt;/h3&gt;&#10;                        &lt;p&gt;Monte times vencedores selecionando os melhores integrantes&lt;/p&gt;&#10;                        &lt;a href=&quot;/time&quot; class=&quot;btn btn-success&quot;&gt;Montar&lt;/a&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;            &lt;div class=&quot;col-md-4 mb-4&quot;&gt;&#10;                &lt;div class=&quot;card feature-card h-100&quot;&gt;&#10;                    &lt;div class=&quot;card-body text-center&quot;&gt;&#10;                        &lt;h3&gt; Análises&lt;/h3&gt;&#10;                        &lt;p&gt;Visualize estatísticas e análises dos seus times&lt;/p&gt;&#10;                        &lt;a href=&quot;/analises&quot; class=&quot;btn btn-info&quot;&gt;Analisar&lt;/a&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;        &#10;        &lt;div class=&quot;row mt-4&quot;&gt;&#10;            &lt;div class=&quot;col-12 text-center&quot;&gt;&#10;                &lt;div class=&quot;card&quot;&gt;&#10;                    &lt;div class=&quot;card-body&quot;&gt;&#10;                        &lt;h5&gt; Dados de Teste&lt;/h5&gt;&#10;                        &lt;p&gt;Popule o banco com dados de exemplo para testar as funcionalidades&lt;/p&gt;&#10;                        &lt;button class=&quot;btn btn-warning&quot; onclick=&quot;popularDados()&quot;&gt;&#10;                            &lt;i class=&quot;fas fa-database&quot;&gt;&lt;/i&gt; Popular Dados de Teste&#10;                        &lt;/button&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js&quot;&gt;&lt;/script&gt;&#10;    &lt;script&gt;&#10;        function popularDados() {&#10;            const button = event.target;&#10;            const originalText = button.innerHTML;&#10;            button.innerHTML = '&lt;i class=&quot;fas fa-spinner fa-spin&quot;&gt;&lt;/i&gt; Populando...';&#10;            button.disabled = true;&#10;            &#10;            fetch('/api/popular-dados', {&#10;                method: 'POST'&#10;            })&#10;            .then(response =&gt; {&#10;                if (!response.ok) {&#10;                    throw new Error('Erro na resposta do servidor');&#10;                }&#10;                return response.text();&#10;            })&#10;            .then(data =&gt; {&#10;                alert(data);&#10;                if (data.includes('sucesso')) {&#10;                    location.reload();&#10;                }&#10;            })&#10;            .catch(error =&gt; {&#10;                console.error('Erro:', error);&#10;                alert('Erro ao popular dados: ' + error.message);&#10;            })&#10;            .finally(() =&gt; {&#10;                button.innerHTML = originalText;&#10;                button.disabled = false;&#10;            });&#10;        }&#10;    &lt;/script&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt; " />
              <option name="updatedContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;pt-BR&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#10;    &lt;title&gt;Sistema de Escalação de Times&lt;/title&gt;&#10;    &lt;link href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt;&#10;    &lt;style&gt;&#10;        .hero-section {&#10;            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);&#10;            color: white;&#10;            padding: 100px 0;&#10;        }&#10;        .feature-card {&#10;            border: none;&#10;            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);&#10;            transition: transform 0.3s ease;&#10;        }&#10;        .feature-card:hover {&#10;            transform: translateY(-5px);&#10;        }&#10;    &lt;/style&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;    &lt;nav class=&quot;navbar navbar-expand-lg navbar-dark bg-dark&quot;&gt;&#10;        &lt;div class=&quot;container&quot;&gt;&#10;            &lt;a class=&quot;navbar-brand&quot; href=&quot;/&quot;&gt; Sistema de Escalação&lt;/a&gt;&#10;            &lt;div class=&quot;navbar-nav ms-auto&quot;&gt;&#10;                &lt;a class=&quot;nav-link&quot; href=&quot;/integrante&quot;&gt;Cadastrar Integrantes&lt;/a&gt;&#10;                &lt;a class=&quot;nav-link&quot; href=&quot;/time&quot;&gt;Montar Times&lt;/a&gt;&#10;                &lt;a class=&quot;nav-link&quot; href=&quot;/analises&quot;&gt;Análises&lt;/a&gt;&#10;                &lt;a class=&quot;nav-link&quot; href=&quot;/api/integrantes&quot; target=&quot;_blank&quot;&gt;API Integrantes&lt;/a&gt;&#10;                &lt;a class=&quot;nav-link&quot; href=&quot;/api/times&quot; target=&quot;_blank&quot;&gt;API Times&lt;/a&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    &lt;/nav&gt;&#10;&#10;    &lt;section class=&quot;hero-section&quot;&gt;&#10;        &lt;div class=&quot;container text-center&quot;&gt;&#10;            &lt;h1 class=&quot;display-4 mb-4&quot;&gt;Sistema de Escalação de Times&lt;/h1&gt;&#10;            &lt;p class=&quot;lead mb-5&quot;&gt;Gerencie seus times e integrantes de forma eficiente&lt;/p&gt;&#10;            &lt;div class=&quot;row&quot;&gt;&#10;                &lt;div class=&quot;col-md-6&quot;&gt;&#10;                    &lt;a href=&quot;/integrante&quot; class=&quot;btn btn-light btn-lg me-3&quot;&gt;&#10;                         Cadastrar Integrantes&#10;                    &lt;/a&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;col-md-6&quot;&gt;&#10;                    &lt;a href=&quot;/time&quot; class=&quot;btn btn-outline-light btn-lg&quot;&gt;&#10;                        ⚽ Montar Times&#10;                    &lt;/a&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    &lt;/section&gt;&#10;&#10;    &lt;div class=&quot;container mt-5&quot;&gt;&#10;        &lt;div class=&quot;row&quot;&gt;&#10;            &lt;div class=&quot;col-md-4 mb-4&quot;&gt;&#10;                &lt;div class=&quot;card feature-card h-100&quot;&gt;&#10;                    &lt;div class=&quot;card-body text-center&quot;&gt;&#10;                        &lt;h3&gt; Integrantes&lt;/h3&gt;&#10;                        &lt;p&gt;Cadastre jogadores, atletas ou personagens para seus times&lt;/p&gt;&#10;                        &lt;a href=&quot;/integrante&quot; class=&quot;btn btn-primary&quot;&gt;Gerenciar&lt;/a&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;            &lt;div class=&quot;col-md-4 mb-4&quot;&gt;&#10;                &lt;div class=&quot;card feature-card h-100&quot;&gt;&#10;                    &lt;div class=&quot;card-body text-center&quot;&gt;&#10;                        &lt;h3&gt; Times&lt;/h3&gt;&#10;                        &lt;p&gt;Monte times vencedores selecionando os melhores integrantes&lt;/p&gt;&#10;                        &lt;a href=&quot;/time&quot; class=&quot;btn btn-success&quot;&gt;Montar&lt;/a&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;            &lt;div class=&quot;col-md-4 mb-4&quot;&gt;&#10;                &lt;div class=&quot;card feature-card h-100&quot;&gt;&#10;                    &lt;div class=&quot;card-body text-center&quot;&gt;&#10;                        &lt;h3&gt; Análises&lt;/h3&gt;&#10;                        &lt;p&gt;Visualize estatísticas e análises dos seus times&lt;/p&gt;&#10;                        &lt;a href=&quot;/analises&quot; class=&quot;btn btn-info&quot;&gt;Analisar&lt;/a&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;        &#10;        &lt;div class=&quot;row mt-4&quot;&gt;&#10;            &lt;div class=&quot;col-12 text-center&quot;&gt;&#10;                &lt;div class=&quot;card&quot;&gt;&#10;                    &lt;div class=&quot;card-body&quot;&gt;&#10;                        &lt;h5&gt; Dados de Teste&lt;/h5&gt;&#10;                        &lt;p&gt;Popule o banco com dados de exemplo para testar as funcionalidades&lt;/p&gt;&#10;                        &lt;button class=&quot;btn btn-warning&quot; onclick=&quot;popularDados()&quot;&gt;&#10;                            &lt;i class=&quot;fas fa-database&quot;&gt;&lt;/i&gt; Popular Dados de Teste&#10;                        &lt;/button&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js&quot;&gt;&lt;/script&gt;&#10;    &lt;script&gt;&#10;        function popularDados() {&#10;            const button = event.target;&#10;            const originalText = button.innerHTML;&#10;            button.innerHTML = '&lt;i class=&quot;fas fa-spinner fa-spin&quot;&gt;&lt;/i&gt; Populando...';&#10;            button.disabled = true;&#10;            &#10;            fetch('/api/popular_dados', {&#10;                method: 'POST'&#10;            })&#10;            .then(response =&gt; {&#10;                if (!response.ok) {&#10;                    throw new Error('Erro na resposta do servidor');&#10;                }&#10;                return response.text();&#10;            })&#10;            .then(data =&gt; {&#10;                alert(data);&#10;                if (data.includes('sucesso')) {&#10;                    location.reload();&#10;                }&#10;            })&#10;            .catch(error =&gt; {&#10;                console.error('Erro:', error);&#10;                alert('Erro ao popular dados: ' + error.message);&#10;            })&#10;            .finally(() =&gt; {&#10;                button.innerHTML = originalText;&#10;                button.disabled = false;&#10;            });&#10;        }&#10;    &lt;/script&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>